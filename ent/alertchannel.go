// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/lbrictson/TinyMonitor/ent/alertchannel"
)

// AlertChannel is the model entity for the AlertChannel schema.
type AlertChannel struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// AlertChannelType holds the value of the "alert_channel_type" field.
	AlertChannelType string `json:"alert_channel_type,omitempty"`
	// Config holds the value of the "config" field.
	Config map[string]interface{} `json:"config,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AlertChannelQuery when eager-loading is set.
	Edges AlertChannelEdges `json:"edges"`
}

// AlertChannelEdges holds the relations/edges for other nodes in the graph.
type AlertChannelEdges struct {
	// Monitors holds the value of the monitors edge.
	Monitors []*Monitor `json:"monitors,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// MonitorsOrErr returns the Monitors value or an error if the edge
// was not loaded in eager-loading.
func (e AlertChannelEdges) MonitorsOrErr() ([]*Monitor, error) {
	if e.loadedTypes[0] {
		return e.Monitors, nil
	}
	return nil, &NotLoadedError{edge: "monitors"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AlertChannel) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case alertchannel.FieldConfig:
			values[i] = new([]byte)
		case alertchannel.FieldID, alertchannel.FieldAlertChannelType:
			values[i] = new(sql.NullString)
		case alertchannel.FieldCreatedAt, alertchannel.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AlertChannel", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AlertChannel fields.
func (ac *AlertChannel) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case alertchannel.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ac.ID = value.String
			}
		case alertchannel.FieldAlertChannelType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field alert_channel_type", values[i])
			} else if value.Valid {
				ac.AlertChannelType = value.String
			}
		case alertchannel.FieldConfig:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field config", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ac.Config); err != nil {
					return fmt.Errorf("unmarshal field config: %w", err)
				}
			}
		case alertchannel.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ac.CreatedAt = value.Time
			}
		case alertchannel.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ac.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryMonitors queries the "monitors" edge of the AlertChannel entity.
func (ac *AlertChannel) QueryMonitors() *MonitorQuery {
	return (&AlertChannelClient{config: ac.config}).QueryMonitors(ac)
}

// Update returns a builder for updating this AlertChannel.
// Note that you need to call AlertChannel.Unwrap() before calling this method if this AlertChannel
// was returned from a transaction, and the transaction was committed or rolled back.
func (ac *AlertChannel) Update() *AlertChannelUpdateOne {
	return (&AlertChannelClient{config: ac.config}).UpdateOne(ac)
}

// Unwrap unwraps the AlertChannel entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ac *AlertChannel) Unwrap() *AlertChannel {
	_tx, ok := ac.config.driver.(*txDriver)
	if !ok {
		panic("ent: AlertChannel is not a transactional entity")
	}
	ac.config.driver = _tx.drv
	return ac
}

// String implements the fmt.Stringer.
func (ac *AlertChannel) String() string {
	var builder strings.Builder
	builder.WriteString("AlertChannel(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ac.ID))
	builder.WriteString("alert_channel_type=")
	builder.WriteString(ac.AlertChannelType)
	builder.WriteString(", ")
	builder.WriteString("config=")
	builder.WriteString(fmt.Sprintf("%v", ac.Config))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ac.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ac.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// AlertChannels is a parsable slice of AlertChannel.
type AlertChannels []*AlertChannel

func (ac AlertChannels) config(cfg config) {
	for _i := range ac {
		ac[_i].config = cfg
	}
}
