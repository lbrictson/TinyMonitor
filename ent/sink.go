// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/lbrictson/TinyMonitor/ent/sink"
)

// Sink is the model entity for the Sink schema.
type Sink struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// SinkType holds the value of the "sink_type" field.
	SinkType string `json:"sink_type,omitempty"`
	// Config holds the value of the "config" field.
	Config map[string]interface{} `json:"config,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Sink) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sink.FieldConfig:
			values[i] = new([]byte)
		case sink.FieldID, sink.FieldSinkType:
			values[i] = new(sql.NullString)
		case sink.FieldCreatedAt, sink.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Sink", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Sink fields.
func (s *Sink) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sink.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				s.ID = value.String
			}
		case sink.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case sink.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				s.UpdatedAt = value.Time
			}
		case sink.FieldSinkType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sink_type", values[i])
			} else if value.Valid {
				s.SinkType = value.String
			}
		case sink.FieldConfig:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field config", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.Config); err != nil {
					return fmt.Errorf("unmarshal field config: %w", err)
				}
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Sink.
// Note that you need to call Sink.Unwrap() before calling this method if this Sink
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Sink) Update() *SinkUpdateOne {
	return (&SinkClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Sink entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Sink) Unwrap() *Sink {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Sink is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Sink) String() string {
	var builder strings.Builder
	builder.WriteString("Sink(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(s.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("sink_type=")
	builder.WriteString(s.SinkType)
	builder.WriteString(", ")
	builder.WriteString("config=")
	builder.WriteString(fmt.Sprintf("%v", s.Config))
	builder.WriteByte(')')
	return builder.String()
}

// Sinks is a parsable slice of Sink.
type Sinks []*Sink

func (s Sinks) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
