// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lbrictson/TinyMonitor/ent/sink"
)

// SinkCreate is the builder for creating a Sink entity.
type SinkCreate struct {
	config
	mutation *SinkMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (sc *SinkCreate) SetCreatedAt(t time.Time) *SinkCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *SinkCreate) SetNillableCreatedAt(t *time.Time) *SinkCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *SinkCreate) SetUpdatedAt(t time.Time) *SinkCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *SinkCreate) SetNillableUpdatedAt(t *time.Time) *SinkCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetSinkType sets the "sink_type" field.
func (sc *SinkCreate) SetSinkType(s string) *SinkCreate {
	sc.mutation.SetSinkType(s)
	return sc
}

// SetConfig sets the "config" field.
func (sc *SinkCreate) SetConfig(m map[string]interface{}) *SinkCreate {
	sc.mutation.SetConfig(m)
	return sc
}

// SetID sets the "id" field.
func (sc *SinkCreate) SetID(s string) *SinkCreate {
	sc.mutation.SetID(s)
	return sc
}

// Mutation returns the SinkMutation object of the builder.
func (sc *SinkCreate) Mutation() *SinkMutation {
	return sc.mutation
}

// Save creates the Sink in the database.
func (sc *SinkCreate) Save(ctx context.Context) (*Sink, error) {
	var (
		err  error
		node *Sink
	)
	sc.defaults()
	if len(sc.hooks) == 0 {
		if err = sc.check(); err != nil {
			return nil, err
		}
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SinkMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sc.check(); err != nil {
				return nil, err
			}
			sc.mutation = mutation
			if node, err = sc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			if sc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, sc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Sink)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from SinkMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SinkCreate) SaveX(ctx context.Context) *Sink {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SinkCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SinkCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SinkCreate) defaults() {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := sink.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		v := sink.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SinkCreate) check() error {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Sink.created_at"`)}
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Sink.updated_at"`)}
	}
	if _, ok := sc.mutation.SinkType(); !ok {
		return &ValidationError{Name: "sink_type", err: errors.New(`ent: missing required field "Sink.sink_type"`)}
	}
	if v, ok := sc.mutation.SinkType(); ok {
		if err := sink.SinkTypeValidator(v); err != nil {
			return &ValidationError{Name: "sink_type", err: fmt.Errorf(`ent: validator failed for field "Sink.sink_type": %w`, err)}
		}
	}
	if _, ok := sc.mutation.Config(); !ok {
		return &ValidationError{Name: "config", err: errors.New(`ent: missing required field "Sink.config"`)}
	}
	if v, ok := sc.mutation.ID(); ok {
		if err := sink.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Sink.id": %w`, err)}
		}
	}
	return nil
}

func (sc *SinkCreate) sqlSave(ctx context.Context) (*Sink, error) {
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Sink.ID type: %T", _spec.ID.Value)
		}
	}
	return _node, nil
}

func (sc *SinkCreate) createSpec() (*Sink, *sqlgraph.CreateSpec) {
	var (
		_node = &Sink{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: sink.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: sink.FieldID,
			},
		}
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.SetField(sink.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.SetField(sink.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := sc.mutation.SinkType(); ok {
		_spec.SetField(sink.FieldSinkType, field.TypeString, value)
		_node.SinkType = value
	}
	if value, ok := sc.mutation.Config(); ok {
		_spec.SetField(sink.FieldConfig, field.TypeJSON, value)
		_node.Config = value
	}
	return _node, _spec
}

// SinkCreateBulk is the builder for creating many Sink entities in bulk.
type SinkCreateBulk struct {
	config
	builders []*SinkCreate
}

// Save creates the Sink entities in the database.
func (scb *SinkCreateBulk) Save(ctx context.Context) ([]*Sink, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Sink, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SinkMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SinkCreateBulk) SaveX(ctx context.Context) []*Sink {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SinkCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SinkCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
