// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lbrictson/TinyMonitor/ent/monitor"
	"github.com/lbrictson/TinyMonitor/ent/predicate"
)

// MonitorUpdate is the builder for updating Monitor entities.
type MonitorUpdate struct {
	config
	hooks    []Hook
	mutation *MonitorMutation
}

// Where appends a list predicates to the MonitorUpdate builder.
func (mu *MonitorUpdate) Where(ps ...predicate.Monitor) *MonitorUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetDescription sets the "description" field.
func (mu *MonitorUpdate) SetDescription(s string) *MonitorUpdate {
	mu.mutation.SetDescription(s)
	return mu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (mu *MonitorUpdate) SetNillableDescription(s *string) *MonitorUpdate {
	if s != nil {
		mu.SetDescription(*s)
	}
	return mu
}

// SetCurrentDownReason sets the "current_down_reason" field.
func (mu *MonitorUpdate) SetCurrentDownReason(s string) *MonitorUpdate {
	mu.mutation.SetCurrentDownReason(s)
	return mu
}

// SetNillableCurrentDownReason sets the "current_down_reason" field if the given value is not nil.
func (mu *MonitorUpdate) SetNillableCurrentDownReason(s *string) *MonitorUpdate {
	if s != nil {
		mu.SetCurrentDownReason(*s)
	}
	return mu
}

// SetStatus sets the "status" field.
func (mu *MonitorUpdate) SetStatus(s string) *MonitorUpdate {
	mu.mutation.SetStatus(s)
	return mu
}

// SetLastCheckedAt sets the "last_checked_at" field.
func (mu *MonitorUpdate) SetLastCheckedAt(t time.Time) *MonitorUpdate {
	mu.mutation.SetLastCheckedAt(t)
	return mu
}

// SetNillableLastCheckedAt sets the "last_checked_at" field if the given value is not nil.
func (mu *MonitorUpdate) SetNillableLastCheckedAt(t *time.Time) *MonitorUpdate {
	if t != nil {
		mu.SetLastCheckedAt(*t)
	}
	return mu
}

// ClearLastCheckedAt clears the value of the "last_checked_at" field.
func (mu *MonitorUpdate) ClearLastCheckedAt() *MonitorUpdate {
	mu.mutation.ClearLastCheckedAt()
	return mu
}

// SetStatusLastChangedAt sets the "status_last_changed_at" field.
func (mu *MonitorUpdate) SetStatusLastChangedAt(t time.Time) *MonitorUpdate {
	mu.mutation.SetStatusLastChangedAt(t)
	return mu
}

// SetNillableStatusLastChangedAt sets the "status_last_changed_at" field if the given value is not nil.
func (mu *MonitorUpdate) SetNillableStatusLastChangedAt(t *time.Time) *MonitorUpdate {
	if t != nil {
		mu.SetStatusLastChangedAt(*t)
	}
	return mu
}

// SetCreatedAt sets the "created_at" field.
func (mu *MonitorUpdate) SetCreatedAt(t time.Time) *MonitorUpdate {
	mu.mutation.SetCreatedAt(t)
	return mu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mu *MonitorUpdate) SetNillableCreatedAt(t *time.Time) *MonitorUpdate {
	if t != nil {
		mu.SetCreatedAt(*t)
	}
	return mu
}

// SetUpdatedAt sets the "updated_at" field.
func (mu *MonitorUpdate) SetUpdatedAt(t time.Time) *MonitorUpdate {
	mu.mutation.SetUpdatedAt(t)
	return mu
}

// SetConfig sets the "config" field.
func (mu *MonitorUpdate) SetConfig(m map[string]interface{}) *MonitorUpdate {
	mu.mutation.SetConfig(m)
	return mu
}

// SetIntervalSeconds sets the "interval_seconds" field.
func (mu *MonitorUpdate) SetIntervalSeconds(i int) *MonitorUpdate {
	mu.mutation.ResetIntervalSeconds()
	mu.mutation.SetIntervalSeconds(i)
	return mu
}

// SetNillableIntervalSeconds sets the "interval_seconds" field if the given value is not nil.
func (mu *MonitorUpdate) SetNillableIntervalSeconds(i *int) *MonitorUpdate {
	if i != nil {
		mu.SetIntervalSeconds(*i)
	}
	return mu
}

// AddIntervalSeconds adds i to the "interval_seconds" field.
func (mu *MonitorUpdate) AddIntervalSeconds(i int) *MonitorUpdate {
	mu.mutation.AddIntervalSeconds(i)
	return mu
}

// SetPaused sets the "paused" field.
func (mu *MonitorUpdate) SetPaused(b bool) *MonitorUpdate {
	mu.mutation.SetPaused(b)
	return mu
}

// SetNillablePaused sets the "paused" field if the given value is not nil.
func (mu *MonitorUpdate) SetNillablePaused(b *bool) *MonitorUpdate {
	if b != nil {
		mu.SetPaused(*b)
	}
	return mu
}

// SetFailureCount sets the "failure_count" field.
func (mu *MonitorUpdate) SetFailureCount(i int) *MonitorUpdate {
	mu.mutation.ResetFailureCount()
	mu.mutation.SetFailureCount(i)
	return mu
}

// SetNillableFailureCount sets the "failure_count" field if the given value is not nil.
func (mu *MonitorUpdate) SetNillableFailureCount(i *int) *MonitorUpdate {
	if i != nil {
		mu.SetFailureCount(*i)
	}
	return mu
}

// AddFailureCount adds i to the "failure_count" field.
func (mu *MonitorUpdate) AddFailureCount(i int) *MonitorUpdate {
	mu.mutation.AddFailureCount(i)
	return mu
}

// SetSuccessThreshold sets the "success_threshold" field.
func (mu *MonitorUpdate) SetSuccessThreshold(i int) *MonitorUpdate {
	mu.mutation.ResetSuccessThreshold()
	mu.mutation.SetSuccessThreshold(i)
	return mu
}

// SetNillableSuccessThreshold sets the "success_threshold" field if the given value is not nil.
func (mu *MonitorUpdate) SetNillableSuccessThreshold(i *int) *MonitorUpdate {
	if i != nil {
		mu.SetSuccessThreshold(*i)
	}
	return mu
}

// AddSuccessThreshold adds i to the "success_threshold" field.
func (mu *MonitorUpdate) AddSuccessThreshold(i int) *MonitorUpdate {
	mu.mutation.AddSuccessThreshold(i)
	return mu
}

// SetFailureThreshold sets the "failure_threshold" field.
func (mu *MonitorUpdate) SetFailureThreshold(i int) *MonitorUpdate {
	mu.mutation.ResetFailureThreshold()
	mu.mutation.SetFailureThreshold(i)
	return mu
}

// SetNillableFailureThreshold sets the "failure_threshold" field if the given value is not nil.
func (mu *MonitorUpdate) SetNillableFailureThreshold(i *int) *MonitorUpdate {
	if i != nil {
		mu.SetFailureThreshold(*i)
	}
	return mu
}

// AddFailureThreshold adds i to the "failure_threshold" field.
func (mu *MonitorUpdate) AddFailureThreshold(i int) *MonitorUpdate {
	mu.mutation.AddFailureThreshold(i)
	return mu
}

// Mutation returns the MonitorMutation object of the builder.
func (mu *MonitorUpdate) Mutation() *MonitorMutation {
	return mu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MonitorUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	mu.defaults()
	if len(mu.hooks) == 0 {
		affected, err = mu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MonitorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mu.mutation = mutation
			affected, err = mu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mu.hooks) - 1; i >= 0; i-- {
			if mu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MonitorUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MonitorUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MonitorUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mu *MonitorUpdate) defaults() {
	if _, ok := mu.mutation.UpdatedAt(); !ok {
		v := monitor.UpdateDefaultUpdatedAt()
		mu.mutation.SetUpdatedAt(v)
	}
}

func (mu *MonitorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   monitor.Table,
			Columns: monitor.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: monitor.FieldID,
			},
		},
	}
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Description(); ok {
		_spec.SetField(monitor.FieldDescription, field.TypeString, value)
	}
	if value, ok := mu.mutation.CurrentDownReason(); ok {
		_spec.SetField(monitor.FieldCurrentDownReason, field.TypeString, value)
	}
	if value, ok := mu.mutation.Status(); ok {
		_spec.SetField(monitor.FieldStatus, field.TypeString, value)
	}
	if value, ok := mu.mutation.LastCheckedAt(); ok {
		_spec.SetField(monitor.FieldLastCheckedAt, field.TypeTime, value)
	}
	if mu.mutation.LastCheckedAtCleared() {
		_spec.ClearField(monitor.FieldLastCheckedAt, field.TypeTime)
	}
	if value, ok := mu.mutation.StatusLastChangedAt(); ok {
		_spec.SetField(monitor.FieldStatusLastChangedAt, field.TypeTime, value)
	}
	if value, ok := mu.mutation.CreatedAt(); ok {
		_spec.SetField(monitor.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := mu.mutation.UpdatedAt(); ok {
		_spec.SetField(monitor.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mu.mutation.Config(); ok {
		_spec.SetField(monitor.FieldConfig, field.TypeJSON, value)
	}
	if value, ok := mu.mutation.IntervalSeconds(); ok {
		_spec.SetField(monitor.FieldIntervalSeconds, field.TypeInt, value)
	}
	if value, ok := mu.mutation.AddedIntervalSeconds(); ok {
		_spec.AddField(monitor.FieldIntervalSeconds, field.TypeInt, value)
	}
	if value, ok := mu.mutation.Paused(); ok {
		_spec.SetField(monitor.FieldPaused, field.TypeBool, value)
	}
	if value, ok := mu.mutation.FailureCount(); ok {
		_spec.SetField(monitor.FieldFailureCount, field.TypeInt, value)
	}
	if value, ok := mu.mutation.AddedFailureCount(); ok {
		_spec.AddField(monitor.FieldFailureCount, field.TypeInt, value)
	}
	if value, ok := mu.mutation.SuccessThreshold(); ok {
		_spec.SetField(monitor.FieldSuccessThreshold, field.TypeInt, value)
	}
	if value, ok := mu.mutation.AddedSuccessThreshold(); ok {
		_spec.AddField(monitor.FieldSuccessThreshold, field.TypeInt, value)
	}
	if value, ok := mu.mutation.FailureThreshold(); ok {
		_spec.SetField(monitor.FieldFailureThreshold, field.TypeInt, value)
	}
	if value, ok := mu.mutation.AddedFailureThreshold(); ok {
		_spec.AddField(monitor.FieldFailureThreshold, field.TypeInt, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{monitor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// MonitorUpdateOne is the builder for updating a single Monitor entity.
type MonitorUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MonitorMutation
}

// SetDescription sets the "description" field.
func (muo *MonitorUpdateOne) SetDescription(s string) *MonitorUpdateOne {
	muo.mutation.SetDescription(s)
	return muo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (muo *MonitorUpdateOne) SetNillableDescription(s *string) *MonitorUpdateOne {
	if s != nil {
		muo.SetDescription(*s)
	}
	return muo
}

// SetCurrentDownReason sets the "current_down_reason" field.
func (muo *MonitorUpdateOne) SetCurrentDownReason(s string) *MonitorUpdateOne {
	muo.mutation.SetCurrentDownReason(s)
	return muo
}

// SetNillableCurrentDownReason sets the "current_down_reason" field if the given value is not nil.
func (muo *MonitorUpdateOne) SetNillableCurrentDownReason(s *string) *MonitorUpdateOne {
	if s != nil {
		muo.SetCurrentDownReason(*s)
	}
	return muo
}

// SetStatus sets the "status" field.
func (muo *MonitorUpdateOne) SetStatus(s string) *MonitorUpdateOne {
	muo.mutation.SetStatus(s)
	return muo
}

// SetLastCheckedAt sets the "last_checked_at" field.
func (muo *MonitorUpdateOne) SetLastCheckedAt(t time.Time) *MonitorUpdateOne {
	muo.mutation.SetLastCheckedAt(t)
	return muo
}

// SetNillableLastCheckedAt sets the "last_checked_at" field if the given value is not nil.
func (muo *MonitorUpdateOne) SetNillableLastCheckedAt(t *time.Time) *MonitorUpdateOne {
	if t != nil {
		muo.SetLastCheckedAt(*t)
	}
	return muo
}

// ClearLastCheckedAt clears the value of the "last_checked_at" field.
func (muo *MonitorUpdateOne) ClearLastCheckedAt() *MonitorUpdateOne {
	muo.mutation.ClearLastCheckedAt()
	return muo
}

// SetStatusLastChangedAt sets the "status_last_changed_at" field.
func (muo *MonitorUpdateOne) SetStatusLastChangedAt(t time.Time) *MonitorUpdateOne {
	muo.mutation.SetStatusLastChangedAt(t)
	return muo
}

// SetNillableStatusLastChangedAt sets the "status_last_changed_at" field if the given value is not nil.
func (muo *MonitorUpdateOne) SetNillableStatusLastChangedAt(t *time.Time) *MonitorUpdateOne {
	if t != nil {
		muo.SetStatusLastChangedAt(*t)
	}
	return muo
}

// SetCreatedAt sets the "created_at" field.
func (muo *MonitorUpdateOne) SetCreatedAt(t time.Time) *MonitorUpdateOne {
	muo.mutation.SetCreatedAt(t)
	return muo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (muo *MonitorUpdateOne) SetNillableCreatedAt(t *time.Time) *MonitorUpdateOne {
	if t != nil {
		muo.SetCreatedAt(*t)
	}
	return muo
}

// SetUpdatedAt sets the "updated_at" field.
func (muo *MonitorUpdateOne) SetUpdatedAt(t time.Time) *MonitorUpdateOne {
	muo.mutation.SetUpdatedAt(t)
	return muo
}

// SetConfig sets the "config" field.
func (muo *MonitorUpdateOne) SetConfig(m map[string]interface{}) *MonitorUpdateOne {
	muo.mutation.SetConfig(m)
	return muo
}

// SetIntervalSeconds sets the "interval_seconds" field.
func (muo *MonitorUpdateOne) SetIntervalSeconds(i int) *MonitorUpdateOne {
	muo.mutation.ResetIntervalSeconds()
	muo.mutation.SetIntervalSeconds(i)
	return muo
}

// SetNillableIntervalSeconds sets the "interval_seconds" field if the given value is not nil.
func (muo *MonitorUpdateOne) SetNillableIntervalSeconds(i *int) *MonitorUpdateOne {
	if i != nil {
		muo.SetIntervalSeconds(*i)
	}
	return muo
}

// AddIntervalSeconds adds i to the "interval_seconds" field.
func (muo *MonitorUpdateOne) AddIntervalSeconds(i int) *MonitorUpdateOne {
	muo.mutation.AddIntervalSeconds(i)
	return muo
}

// SetPaused sets the "paused" field.
func (muo *MonitorUpdateOne) SetPaused(b bool) *MonitorUpdateOne {
	muo.mutation.SetPaused(b)
	return muo
}

// SetNillablePaused sets the "paused" field if the given value is not nil.
func (muo *MonitorUpdateOne) SetNillablePaused(b *bool) *MonitorUpdateOne {
	if b != nil {
		muo.SetPaused(*b)
	}
	return muo
}

// SetFailureCount sets the "failure_count" field.
func (muo *MonitorUpdateOne) SetFailureCount(i int) *MonitorUpdateOne {
	muo.mutation.ResetFailureCount()
	muo.mutation.SetFailureCount(i)
	return muo
}

// SetNillableFailureCount sets the "failure_count" field if the given value is not nil.
func (muo *MonitorUpdateOne) SetNillableFailureCount(i *int) *MonitorUpdateOne {
	if i != nil {
		muo.SetFailureCount(*i)
	}
	return muo
}

// AddFailureCount adds i to the "failure_count" field.
func (muo *MonitorUpdateOne) AddFailureCount(i int) *MonitorUpdateOne {
	muo.mutation.AddFailureCount(i)
	return muo
}

// SetSuccessThreshold sets the "success_threshold" field.
func (muo *MonitorUpdateOne) SetSuccessThreshold(i int) *MonitorUpdateOne {
	muo.mutation.ResetSuccessThreshold()
	muo.mutation.SetSuccessThreshold(i)
	return muo
}

// SetNillableSuccessThreshold sets the "success_threshold" field if the given value is not nil.
func (muo *MonitorUpdateOne) SetNillableSuccessThreshold(i *int) *MonitorUpdateOne {
	if i != nil {
		muo.SetSuccessThreshold(*i)
	}
	return muo
}

// AddSuccessThreshold adds i to the "success_threshold" field.
func (muo *MonitorUpdateOne) AddSuccessThreshold(i int) *MonitorUpdateOne {
	muo.mutation.AddSuccessThreshold(i)
	return muo
}

// SetFailureThreshold sets the "failure_threshold" field.
func (muo *MonitorUpdateOne) SetFailureThreshold(i int) *MonitorUpdateOne {
	muo.mutation.ResetFailureThreshold()
	muo.mutation.SetFailureThreshold(i)
	return muo
}

// SetNillableFailureThreshold sets the "failure_threshold" field if the given value is not nil.
func (muo *MonitorUpdateOne) SetNillableFailureThreshold(i *int) *MonitorUpdateOne {
	if i != nil {
		muo.SetFailureThreshold(*i)
	}
	return muo
}

// AddFailureThreshold adds i to the "failure_threshold" field.
func (muo *MonitorUpdateOne) AddFailureThreshold(i int) *MonitorUpdateOne {
	muo.mutation.AddFailureThreshold(i)
	return muo
}

// Mutation returns the MonitorMutation object of the builder.
func (muo *MonitorUpdateOne) Mutation() *MonitorMutation {
	return muo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MonitorUpdateOne) Select(field string, fields ...string) *MonitorUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Monitor entity.
func (muo *MonitorUpdateOne) Save(ctx context.Context) (*Monitor, error) {
	var (
		err  error
		node *Monitor
	)
	muo.defaults()
	if len(muo.hooks) == 0 {
		node, err = muo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MonitorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			muo.mutation = mutation
			node, err = muo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(muo.hooks) - 1; i >= 0; i-- {
			if muo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = muo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, muo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Monitor)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from MonitorMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MonitorUpdateOne) SaveX(ctx context.Context) *Monitor {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MonitorUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MonitorUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (muo *MonitorUpdateOne) defaults() {
	if _, ok := muo.mutation.UpdatedAt(); !ok {
		v := monitor.UpdateDefaultUpdatedAt()
		muo.mutation.SetUpdatedAt(v)
	}
}

func (muo *MonitorUpdateOne) sqlSave(ctx context.Context) (_node *Monitor, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   monitor.Table,
			Columns: monitor.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: monitor.FieldID,
			},
		},
	}
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Monitor.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, monitor.FieldID)
		for _, f := range fields {
			if !monitor.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != monitor.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.Description(); ok {
		_spec.SetField(monitor.FieldDescription, field.TypeString, value)
	}
	if value, ok := muo.mutation.CurrentDownReason(); ok {
		_spec.SetField(monitor.FieldCurrentDownReason, field.TypeString, value)
	}
	if value, ok := muo.mutation.Status(); ok {
		_spec.SetField(monitor.FieldStatus, field.TypeString, value)
	}
	if value, ok := muo.mutation.LastCheckedAt(); ok {
		_spec.SetField(monitor.FieldLastCheckedAt, field.TypeTime, value)
	}
	if muo.mutation.LastCheckedAtCleared() {
		_spec.ClearField(monitor.FieldLastCheckedAt, field.TypeTime)
	}
	if value, ok := muo.mutation.StatusLastChangedAt(); ok {
		_spec.SetField(monitor.FieldStatusLastChangedAt, field.TypeTime, value)
	}
	if value, ok := muo.mutation.CreatedAt(); ok {
		_spec.SetField(monitor.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := muo.mutation.UpdatedAt(); ok {
		_spec.SetField(monitor.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := muo.mutation.Config(); ok {
		_spec.SetField(monitor.FieldConfig, field.TypeJSON, value)
	}
	if value, ok := muo.mutation.IntervalSeconds(); ok {
		_spec.SetField(monitor.FieldIntervalSeconds, field.TypeInt, value)
	}
	if value, ok := muo.mutation.AddedIntervalSeconds(); ok {
		_spec.AddField(monitor.FieldIntervalSeconds, field.TypeInt, value)
	}
	if value, ok := muo.mutation.Paused(); ok {
		_spec.SetField(monitor.FieldPaused, field.TypeBool, value)
	}
	if value, ok := muo.mutation.FailureCount(); ok {
		_spec.SetField(monitor.FieldFailureCount, field.TypeInt, value)
	}
	if value, ok := muo.mutation.AddedFailureCount(); ok {
		_spec.AddField(monitor.FieldFailureCount, field.TypeInt, value)
	}
	if value, ok := muo.mutation.SuccessThreshold(); ok {
		_spec.SetField(monitor.FieldSuccessThreshold, field.TypeInt, value)
	}
	if value, ok := muo.mutation.AddedSuccessThreshold(); ok {
		_spec.AddField(monitor.FieldSuccessThreshold, field.TypeInt, value)
	}
	if value, ok := muo.mutation.FailureThreshold(); ok {
		_spec.SetField(monitor.FieldFailureThreshold, field.TypeInt, value)
	}
	if value, ok := muo.mutation.AddedFailureThreshold(); ok {
		_spec.AddField(monitor.FieldFailureThreshold, field.TypeInt, value)
	}
	_node = &Monitor{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{monitor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
