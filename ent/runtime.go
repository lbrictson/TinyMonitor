// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/lbrictson/TinyMonitor/ent/monitor"
	"github.com/lbrictson/TinyMonitor/ent/schema"
	"github.com/lbrictson/TinyMonitor/ent/secret"
	"github.com/lbrictson/TinyMonitor/ent/user"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	monitorFields := schema.Monitor{}.Fields()
	_ = monitorFields
	// monitorDescDescription is the schema descriptor for description field.
	monitorDescDescription := monitorFields[1].Descriptor()
	// monitor.DefaultDescription holds the default value on creation for the description field.
	monitor.DefaultDescription = monitorDescDescription.Default.(string)
	// monitorDescCurrentDownReason is the schema descriptor for current_down_reason field.
	monitorDescCurrentDownReason := monitorFields[2].Descriptor()
	// monitor.DefaultCurrentDownReason holds the default value on creation for the current_down_reason field.
	monitor.DefaultCurrentDownReason = monitorDescCurrentDownReason.Default.(string)
	// monitorDescStatusLastChangedAt is the schema descriptor for status_last_changed_at field.
	monitorDescStatusLastChangedAt := monitorFields[5].Descriptor()
	// monitor.DefaultStatusLastChangedAt holds the default value on creation for the status_last_changed_at field.
	monitor.DefaultStatusLastChangedAt = monitorDescStatusLastChangedAt.Default.(func() time.Time)
	// monitorDescCreatedAt is the schema descriptor for created_at field.
	monitorDescCreatedAt := monitorFields[7].Descriptor()
	// monitor.DefaultCreatedAt holds the default value on creation for the created_at field.
	monitor.DefaultCreatedAt = monitorDescCreatedAt.Default.(func() time.Time)
	// monitorDescUpdatedAt is the schema descriptor for updated_at field.
	monitorDescUpdatedAt := monitorFields[8].Descriptor()
	// monitor.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	monitor.DefaultUpdatedAt = monitorDescUpdatedAt.Default.(func() time.Time)
	// monitor.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	monitor.UpdateDefaultUpdatedAt = monitorDescUpdatedAt.UpdateDefault.(func() time.Time)
	// monitorDescIntervalSeconds is the schema descriptor for interval_seconds field.
	monitorDescIntervalSeconds := monitorFields[10].Descriptor()
	// monitor.DefaultIntervalSeconds holds the default value on creation for the interval_seconds field.
	monitor.DefaultIntervalSeconds = monitorDescIntervalSeconds.Default.(int)
	// monitorDescPaused is the schema descriptor for paused field.
	monitorDescPaused := monitorFields[11].Descriptor()
	// monitor.DefaultPaused holds the default value on creation for the paused field.
	monitor.DefaultPaused = monitorDescPaused.Default.(bool)
	// monitorDescFailureCount is the schema descriptor for failure_count field.
	monitorDescFailureCount := monitorFields[12].Descriptor()
	// monitor.DefaultFailureCount holds the default value on creation for the failure_count field.
	monitor.DefaultFailureCount = monitorDescFailureCount.Default.(int)
	// monitorDescSuccessCount is the schema descriptor for success_count field.
	monitorDescSuccessCount := monitorFields[13].Descriptor()
	// monitor.DefaultSuccessCount holds the default value on creation for the success_count field.
	monitor.DefaultSuccessCount = monitorDescSuccessCount.Default.(int)
	// monitorDescSuccessThreshold is the schema descriptor for success_threshold field.
	monitorDescSuccessThreshold := monitorFields[14].Descriptor()
	// monitor.DefaultSuccessThreshold holds the default value on creation for the success_threshold field.
	monitor.DefaultSuccessThreshold = monitorDescSuccessThreshold.Default.(int)
	// monitorDescFailureThreshold is the schema descriptor for failure_threshold field.
	monitorDescFailureThreshold := monitorFields[15].Descriptor()
	// monitor.DefaultFailureThreshold holds the default value on creation for the failure_threshold field.
	monitor.DefaultFailureThreshold = monitorDescFailureThreshold.Default.(int)
	// monitorDescID is the schema descriptor for id field.
	monitorDescID := monitorFields[0].Descriptor()
	// monitor.IDValidator is a validator for the "id" field. It is called by the builders before save.
	monitor.IDValidator = func() func(string) error {
		validators := monitorDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	secretFields := schema.Secret{}.Fields()
	_ = secretFields
	// secretDescCreatedAt is the schema descriptor for created_at field.
	secretDescCreatedAt := secretFields[1].Descriptor()
	// secret.DefaultCreatedAt holds the default value on creation for the created_at field.
	secret.DefaultCreatedAt = secretDescCreatedAt.Default.(func() time.Time)
	// secretDescUpdatedAt is the schema descriptor for updated_at field.
	secretDescUpdatedAt := secretFields[2].Descriptor()
	// secret.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	secret.DefaultUpdatedAt = secretDescUpdatedAt.Default.(func() time.Time)
	// secret.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	secret.UpdateDefaultUpdatedAt = secretDescUpdatedAt.UpdateDefault.(func() time.Time)
	// secretDescCreatedBy is the schema descriptor for created_by field.
	secretDescCreatedBy := secretFields[3].Descriptor()
	// secret.DefaultCreatedBy holds the default value on creation for the created_by field.
	secret.DefaultCreatedBy = secretDescCreatedBy.Default.(string)
	// secretDescValue is the schema descriptor for value field.
	secretDescValue := secretFields[4].Descriptor()
	// secret.ValueValidator is a validator for the "value" field. It is called by the builders before save.
	secret.ValueValidator = func() func(string) error {
		validators := secretDescValue.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(value string) error {
			for _, fn := range fns {
				if err := fn(value); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// secretDescID is the schema descriptor for id field.
	secretDescID := secretFields[0].Descriptor()
	// secret.IDValidator is a validator for the "id" field. It is called by the builders before save.
	secret.IDValidator = func() func(string) error {
		validators := secretDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userFields[2].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(time.Time)
	// userDescUpdatedAt is the schema descriptor for updated_at field.
	userDescUpdatedAt := userFields[3].Descriptor()
	// user.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	user.DefaultUpdatedAt = userDescUpdatedAt.Default.(time.Time)
	// user.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	user.UpdateDefaultUpdatedAt = userDescUpdatedAt.UpdateDefault.(func() time.Time)
	// userDescRole is the schema descriptor for role field.
	userDescRole := userFields[4].Descriptor()
	// user.DefaultRole holds the default value on creation for the role field.
	user.DefaultRole = userDescRole.Default.(string)
	// userDescLocked is the schema descriptor for locked field.
	userDescLocked := userFields[5].Descriptor()
	// user.DefaultLocked holds the default value on creation for the locked field.
	user.DefaultLocked = userDescLocked.Default.(bool)
	// userDescID is the schema descriptor for id field.
	userDescID := userFields[0].Descriptor()
	// user.IDValidator is a validator for the "id" field. It is called by the builders before save.
	user.IDValidator = func() func(string) error {
		validators := userDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
}
