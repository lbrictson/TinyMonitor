// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/lbrictson/TinyMonitor/ent/monitor"
	"github.com/lbrictson/TinyMonitor/ent/schema"
	"github.com/lbrictson/TinyMonitor/ent/user"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	monitorFields := schema.Monitor{}.Fields()
	_ = monitorFields
	// monitorDescDescription is the schema descriptor for description field.
	monitorDescDescription := monitorFields[1].Descriptor()
	// monitor.DefaultDescription holds the default value on creation for the description field.
	monitor.DefaultDescription = monitorDescDescription.Default.(string)
	// monitorDescStatusLastChangedAt is the schema descriptor for status_last_changed_at field.
	monitorDescStatusLastChangedAt := monitorFields[4].Descriptor()
	// monitor.DefaultStatusLastChangedAt holds the default value on creation for the status_last_changed_at field.
	monitor.DefaultStatusLastChangedAt = monitorDescStatusLastChangedAt.Default.(func() time.Time)
	// monitorDescCreatedAt is the schema descriptor for created_at field.
	monitorDescCreatedAt := monitorFields[6].Descriptor()
	// monitor.DefaultCreatedAt holds the default value on creation for the created_at field.
	monitor.DefaultCreatedAt = monitorDescCreatedAt.Default.(func() time.Time)
	// monitorDescUpdatedAt is the schema descriptor for updated_at field.
	monitorDescUpdatedAt := monitorFields[7].Descriptor()
	// monitor.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	monitor.DefaultUpdatedAt = monitorDescUpdatedAt.Default.(func() time.Time)
	// monitor.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	monitor.UpdateDefaultUpdatedAt = monitorDescUpdatedAt.UpdateDefault.(func() time.Time)
	// monitorDescIntervalSeconds is the schema descriptor for interval_seconds field.
	monitorDescIntervalSeconds := monitorFields[9].Descriptor()
	// monitor.DefaultIntervalSeconds holds the default value on creation for the interval_seconds field.
	monitor.DefaultIntervalSeconds = monitorDescIntervalSeconds.Default.(int)
	// monitorDescPaused is the schema descriptor for paused field.
	monitorDescPaused := monitorFields[10].Descriptor()
	// monitor.DefaultPaused holds the default value on creation for the paused field.
	monitor.DefaultPaused = monitorDescPaused.Default.(bool)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userFields[2].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(time.Time)
	// userDescUpdatedAt is the schema descriptor for updated_at field.
	userDescUpdatedAt := userFields[3].Descriptor()
	// user.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	user.DefaultUpdatedAt = userDescUpdatedAt.Default.(time.Time)
	// user.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	user.UpdateDefaultUpdatedAt = userDescUpdatedAt.UpdateDefault.(func() time.Time)
	// userDescRole is the schema descriptor for role field.
	userDescRole := userFields[4].Descriptor()
	// user.DefaultRole holds the default value on creation for the role field.
	user.DefaultRole = userDescRole.Default.(string)
	// userDescLocked is the schema descriptor for locked field.
	userDescLocked := userFields[5].Descriptor()
	// user.DefaultLocked holds the default value on creation for the locked field.
	user.DefaultLocked = userDescLocked.Default.(bool)
}
