// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lbrictson/TinyMonitor/ent/monitor"
)

// MonitorCreate is the builder for creating a Monitor entity.
type MonitorCreate struct {
	config
	mutation *MonitorMutation
	hooks    []Hook
}

// SetDescription sets the "description" field.
func (mc *MonitorCreate) SetDescription(s string) *MonitorCreate {
	mc.mutation.SetDescription(s)
	return mc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (mc *MonitorCreate) SetNillableDescription(s *string) *MonitorCreate {
	if s != nil {
		mc.SetDescription(*s)
	}
	return mc
}

// SetStatus sets the "status" field.
func (mc *MonitorCreate) SetStatus(s string) *MonitorCreate {
	mc.mutation.SetStatus(s)
	return mc
}

// SetLastCheckedAt sets the "last_checked_at" field.
func (mc *MonitorCreate) SetLastCheckedAt(t time.Time) *MonitorCreate {
	mc.mutation.SetLastCheckedAt(t)
	return mc
}

// SetNillableLastCheckedAt sets the "last_checked_at" field if the given value is not nil.
func (mc *MonitorCreate) SetNillableLastCheckedAt(t *time.Time) *MonitorCreate {
	if t != nil {
		mc.SetLastCheckedAt(*t)
	}
	return mc
}

// SetStatusLastChangedAt sets the "status_last_changed_at" field.
func (mc *MonitorCreate) SetStatusLastChangedAt(t time.Time) *MonitorCreate {
	mc.mutation.SetStatusLastChangedAt(t)
	return mc
}

// SetNillableStatusLastChangedAt sets the "status_last_changed_at" field if the given value is not nil.
func (mc *MonitorCreate) SetNillableStatusLastChangedAt(t *time.Time) *MonitorCreate {
	if t != nil {
		mc.SetStatusLastChangedAt(*t)
	}
	return mc
}

// SetMonitorType sets the "monitor_type" field.
func (mc *MonitorCreate) SetMonitorType(s string) *MonitorCreate {
	mc.mutation.SetMonitorType(s)
	return mc
}

// SetCreatedAt sets the "created_at" field.
func (mc *MonitorCreate) SetCreatedAt(t time.Time) *MonitorCreate {
	mc.mutation.SetCreatedAt(t)
	return mc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mc *MonitorCreate) SetNillableCreatedAt(t *time.Time) *MonitorCreate {
	if t != nil {
		mc.SetCreatedAt(*t)
	}
	return mc
}

// SetUpdatedAt sets the "updated_at" field.
func (mc *MonitorCreate) SetUpdatedAt(t time.Time) *MonitorCreate {
	mc.mutation.SetUpdatedAt(t)
	return mc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mc *MonitorCreate) SetNillableUpdatedAt(t *time.Time) *MonitorCreate {
	if t != nil {
		mc.SetUpdatedAt(*t)
	}
	return mc
}

// SetConfig sets the "config" field.
func (mc *MonitorCreate) SetConfig(m map[string]interface{}) *MonitorCreate {
	mc.mutation.SetConfig(m)
	return mc
}

// SetIntervalSeconds sets the "interval_seconds" field.
func (mc *MonitorCreate) SetIntervalSeconds(i int) *MonitorCreate {
	mc.mutation.SetIntervalSeconds(i)
	return mc
}

// SetNillableIntervalSeconds sets the "interval_seconds" field if the given value is not nil.
func (mc *MonitorCreate) SetNillableIntervalSeconds(i *int) *MonitorCreate {
	if i != nil {
		mc.SetIntervalSeconds(*i)
	}
	return mc
}

// SetPaused sets the "paused" field.
func (mc *MonitorCreate) SetPaused(b bool) *MonitorCreate {
	mc.mutation.SetPaused(b)
	return mc
}

// SetNillablePaused sets the "paused" field if the given value is not nil.
func (mc *MonitorCreate) SetNillablePaused(b *bool) *MonitorCreate {
	if b != nil {
		mc.SetPaused(*b)
	}
	return mc
}

// SetFailureCount sets the "failure_count" field.
func (mc *MonitorCreate) SetFailureCount(i int) *MonitorCreate {
	mc.mutation.SetFailureCount(i)
	return mc
}

// SetNillableFailureCount sets the "failure_count" field if the given value is not nil.
func (mc *MonitorCreate) SetNillableFailureCount(i *int) *MonitorCreate {
	if i != nil {
		mc.SetFailureCount(*i)
	}
	return mc
}

// SetSuccessThreshold sets the "success_threshold" field.
func (mc *MonitorCreate) SetSuccessThreshold(i int) *MonitorCreate {
	mc.mutation.SetSuccessThreshold(i)
	return mc
}

// SetNillableSuccessThreshold sets the "success_threshold" field if the given value is not nil.
func (mc *MonitorCreate) SetNillableSuccessThreshold(i *int) *MonitorCreate {
	if i != nil {
		mc.SetSuccessThreshold(*i)
	}
	return mc
}

// SetFailureThreshold sets the "failure_threshold" field.
func (mc *MonitorCreate) SetFailureThreshold(i int) *MonitorCreate {
	mc.mutation.SetFailureThreshold(i)
	return mc
}

// SetNillableFailureThreshold sets the "failure_threshold" field if the given value is not nil.
func (mc *MonitorCreate) SetNillableFailureThreshold(i *int) *MonitorCreate {
	if i != nil {
		mc.SetFailureThreshold(*i)
	}
	return mc
}

// SetID sets the "id" field.
func (mc *MonitorCreate) SetID(s string) *MonitorCreate {
	mc.mutation.SetID(s)
	return mc
}

// Mutation returns the MonitorMutation object of the builder.
func (mc *MonitorCreate) Mutation() *MonitorMutation {
	return mc.mutation
}

// Save creates the Monitor in the database.
func (mc *MonitorCreate) Save(ctx context.Context) (*Monitor, error) {
	var (
		err  error
		node *Monitor
	)
	mc.defaults()
	if len(mc.hooks) == 0 {
		if err = mc.check(); err != nil {
			return nil, err
		}
		node, err = mc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MonitorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mc.check(); err != nil {
				return nil, err
			}
			mc.mutation = mutation
			if node, err = mc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(mc.hooks) - 1; i >= 0; i-- {
			if mc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, mc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Monitor)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from MonitorMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MonitorCreate) SaveX(ctx context.Context) *Monitor {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MonitorCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MonitorCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mc *MonitorCreate) defaults() {
	if _, ok := mc.mutation.Description(); !ok {
		v := monitor.DefaultDescription
		mc.mutation.SetDescription(v)
	}
	if _, ok := mc.mutation.StatusLastChangedAt(); !ok {
		v := monitor.DefaultStatusLastChangedAt()
		mc.mutation.SetStatusLastChangedAt(v)
	}
	if _, ok := mc.mutation.CreatedAt(); !ok {
		v := monitor.DefaultCreatedAt()
		mc.mutation.SetCreatedAt(v)
	}
	if _, ok := mc.mutation.UpdatedAt(); !ok {
		v := monitor.DefaultUpdatedAt()
		mc.mutation.SetUpdatedAt(v)
	}
	if _, ok := mc.mutation.IntervalSeconds(); !ok {
		v := monitor.DefaultIntervalSeconds
		mc.mutation.SetIntervalSeconds(v)
	}
	if _, ok := mc.mutation.Paused(); !ok {
		v := monitor.DefaultPaused
		mc.mutation.SetPaused(v)
	}
	if _, ok := mc.mutation.FailureCount(); !ok {
		v := monitor.DefaultFailureCount
		mc.mutation.SetFailureCount(v)
	}
	if _, ok := mc.mutation.SuccessThreshold(); !ok {
		v := monitor.DefaultSuccessThreshold
		mc.mutation.SetSuccessThreshold(v)
	}
	if _, ok := mc.mutation.FailureThreshold(); !ok {
		v := monitor.DefaultFailureThreshold
		mc.mutation.SetFailureThreshold(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MonitorCreate) check() error {
	if _, ok := mc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Monitor.description"`)}
	}
	if _, ok := mc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Monitor.status"`)}
	}
	if _, ok := mc.mutation.StatusLastChangedAt(); !ok {
		return &ValidationError{Name: "status_last_changed_at", err: errors.New(`ent: missing required field "Monitor.status_last_changed_at"`)}
	}
	if _, ok := mc.mutation.MonitorType(); !ok {
		return &ValidationError{Name: "monitor_type", err: errors.New(`ent: missing required field "Monitor.monitor_type"`)}
	}
	if _, ok := mc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Monitor.created_at"`)}
	}
	if _, ok := mc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Monitor.updated_at"`)}
	}
	if _, ok := mc.mutation.Config(); !ok {
		return &ValidationError{Name: "config", err: errors.New(`ent: missing required field "Monitor.config"`)}
	}
	if _, ok := mc.mutation.IntervalSeconds(); !ok {
		return &ValidationError{Name: "interval_seconds", err: errors.New(`ent: missing required field "Monitor.interval_seconds"`)}
	}
	if _, ok := mc.mutation.Paused(); !ok {
		return &ValidationError{Name: "paused", err: errors.New(`ent: missing required field "Monitor.paused"`)}
	}
	if _, ok := mc.mutation.FailureCount(); !ok {
		return &ValidationError{Name: "failure_count", err: errors.New(`ent: missing required field "Monitor.failure_count"`)}
	}
	if _, ok := mc.mutation.SuccessThreshold(); !ok {
		return &ValidationError{Name: "success_threshold", err: errors.New(`ent: missing required field "Monitor.success_threshold"`)}
	}
	if _, ok := mc.mutation.FailureThreshold(); !ok {
		return &ValidationError{Name: "failure_threshold", err: errors.New(`ent: missing required field "Monitor.failure_threshold"`)}
	}
	if v, ok := mc.mutation.ID(); ok {
		if err := monitor.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Monitor.id": %w`, err)}
		}
	}
	return nil
}

func (mc *MonitorCreate) sqlSave(ctx context.Context) (*Monitor, error) {
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Monitor.ID type: %T", _spec.ID.Value)
		}
	}
	return _node, nil
}

func (mc *MonitorCreate) createSpec() (*Monitor, *sqlgraph.CreateSpec) {
	var (
		_node = &Monitor{config: mc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: monitor.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: monitor.FieldID,
			},
		}
	)
	if id, ok := mc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mc.mutation.Description(); ok {
		_spec.SetField(monitor.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := mc.mutation.Status(); ok {
		_spec.SetField(monitor.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := mc.mutation.LastCheckedAt(); ok {
		_spec.SetField(monitor.FieldLastCheckedAt, field.TypeTime, value)
		_node.LastCheckedAt = &value
	}
	if value, ok := mc.mutation.StatusLastChangedAt(); ok {
		_spec.SetField(monitor.FieldStatusLastChangedAt, field.TypeTime, value)
		_node.StatusLastChangedAt = value
	}
	if value, ok := mc.mutation.MonitorType(); ok {
		_spec.SetField(monitor.FieldMonitorType, field.TypeString, value)
		_node.MonitorType = value
	}
	if value, ok := mc.mutation.CreatedAt(); ok {
		_spec.SetField(monitor.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mc.mutation.UpdatedAt(); ok {
		_spec.SetField(monitor.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := mc.mutation.Config(); ok {
		_spec.SetField(monitor.FieldConfig, field.TypeJSON, value)
		_node.Config = value
	}
	if value, ok := mc.mutation.IntervalSeconds(); ok {
		_spec.SetField(monitor.FieldIntervalSeconds, field.TypeInt, value)
		_node.IntervalSeconds = value
	}
	if value, ok := mc.mutation.Paused(); ok {
		_spec.SetField(monitor.FieldPaused, field.TypeBool, value)
		_node.Paused = value
	}
	if value, ok := mc.mutation.FailureCount(); ok {
		_spec.SetField(monitor.FieldFailureCount, field.TypeInt, value)
		_node.FailureCount = value
	}
	if value, ok := mc.mutation.SuccessThreshold(); ok {
		_spec.SetField(monitor.FieldSuccessThreshold, field.TypeInt, value)
		_node.SuccessThreshold = value
	}
	if value, ok := mc.mutation.FailureThreshold(); ok {
		_spec.SetField(monitor.FieldFailureThreshold, field.TypeInt, value)
		_node.FailureThreshold = value
	}
	return _node, _spec
}

// MonitorCreateBulk is the builder for creating many Monitor entities in bulk.
type MonitorCreateBulk struct {
	config
	builders []*MonitorCreate
}

// Save creates the Monitor entities in the database.
func (mcb *MonitorCreateBulk) Save(ctx context.Context) ([]*Monitor, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Monitor, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MonitorMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MonitorCreateBulk) SaveX(ctx context.Context) []*Monitor {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MonitorCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MonitorCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}
