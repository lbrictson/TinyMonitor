// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lbrictson/TinyMonitor/ent/alertchannel"
	"github.com/lbrictson/TinyMonitor/ent/monitor"
	"github.com/lbrictson/TinyMonitor/ent/predicate"
)

// AlertChannelUpdate is the builder for updating AlertChannel entities.
type AlertChannelUpdate struct {
	config
	hooks    []Hook
	mutation *AlertChannelMutation
}

// Where appends a list predicates to the AlertChannelUpdate builder.
func (acu *AlertChannelUpdate) Where(ps ...predicate.AlertChannel) *AlertChannelUpdate {
	acu.mutation.Where(ps...)
	return acu
}

// SetConfig sets the "config" field.
func (acu *AlertChannelUpdate) SetConfig(m map[string]interface{}) *AlertChannelUpdate {
	acu.mutation.SetConfig(m)
	return acu
}

// SetCreatedAt sets the "created_at" field.
func (acu *AlertChannelUpdate) SetCreatedAt(t time.Time) *AlertChannelUpdate {
	acu.mutation.SetCreatedAt(t)
	return acu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (acu *AlertChannelUpdate) SetNillableCreatedAt(t *time.Time) *AlertChannelUpdate {
	if t != nil {
		acu.SetCreatedAt(*t)
	}
	return acu
}

// SetUpdatedAt sets the "updated_at" field.
func (acu *AlertChannelUpdate) SetUpdatedAt(t time.Time) *AlertChannelUpdate {
	acu.mutation.SetUpdatedAt(t)
	return acu
}

// AddMonitorIDs adds the "monitors" edge to the Monitor entity by IDs.
func (acu *AlertChannelUpdate) AddMonitorIDs(ids ...string) *AlertChannelUpdate {
	acu.mutation.AddMonitorIDs(ids...)
	return acu
}

// AddMonitors adds the "monitors" edges to the Monitor entity.
func (acu *AlertChannelUpdate) AddMonitors(m ...*Monitor) *AlertChannelUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return acu.AddMonitorIDs(ids...)
}

// Mutation returns the AlertChannelMutation object of the builder.
func (acu *AlertChannelUpdate) Mutation() *AlertChannelMutation {
	return acu.mutation
}

// ClearMonitors clears all "monitors" edges to the Monitor entity.
func (acu *AlertChannelUpdate) ClearMonitors() *AlertChannelUpdate {
	acu.mutation.ClearMonitors()
	return acu
}

// RemoveMonitorIDs removes the "monitors" edge to Monitor entities by IDs.
func (acu *AlertChannelUpdate) RemoveMonitorIDs(ids ...string) *AlertChannelUpdate {
	acu.mutation.RemoveMonitorIDs(ids...)
	return acu
}

// RemoveMonitors removes "monitors" edges to Monitor entities.
func (acu *AlertChannelUpdate) RemoveMonitors(m ...*Monitor) *AlertChannelUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return acu.RemoveMonitorIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (acu *AlertChannelUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	acu.defaults()
	if len(acu.hooks) == 0 {
		affected, err = acu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AlertChannelMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			acu.mutation = mutation
			affected, err = acu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(acu.hooks) - 1; i >= 0; i-- {
			if acu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = acu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, acu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (acu *AlertChannelUpdate) SaveX(ctx context.Context) int {
	affected, err := acu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (acu *AlertChannelUpdate) Exec(ctx context.Context) error {
	_, err := acu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acu *AlertChannelUpdate) ExecX(ctx context.Context) {
	if err := acu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (acu *AlertChannelUpdate) defaults() {
	if _, ok := acu.mutation.UpdatedAt(); !ok {
		v := alertchannel.UpdateDefaultUpdatedAt()
		acu.mutation.SetUpdatedAt(v)
	}
}

func (acu *AlertChannelUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   alertchannel.Table,
			Columns: alertchannel.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: alertchannel.FieldID,
			},
		},
	}
	if ps := acu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := acu.mutation.Config(); ok {
		_spec.SetField(alertchannel.FieldConfig, field.TypeJSON, value)
	}
	if value, ok := acu.mutation.CreatedAt(); ok {
		_spec.SetField(alertchannel.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := acu.mutation.UpdatedAt(); ok {
		_spec.SetField(alertchannel.FieldUpdatedAt, field.TypeTime, value)
	}
	if acu.mutation.MonitorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   alertchannel.MonitorsTable,
			Columns: alertchannel.MonitorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: monitor.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acu.mutation.RemovedMonitorsIDs(); len(nodes) > 0 && !acu.mutation.MonitorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   alertchannel.MonitorsTable,
			Columns: alertchannel.MonitorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: monitor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acu.mutation.MonitorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   alertchannel.MonitorsTable,
			Columns: alertchannel.MonitorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: monitor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, acu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{alertchannel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// AlertChannelUpdateOne is the builder for updating a single AlertChannel entity.
type AlertChannelUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AlertChannelMutation
}

// SetConfig sets the "config" field.
func (acuo *AlertChannelUpdateOne) SetConfig(m map[string]interface{}) *AlertChannelUpdateOne {
	acuo.mutation.SetConfig(m)
	return acuo
}

// SetCreatedAt sets the "created_at" field.
func (acuo *AlertChannelUpdateOne) SetCreatedAt(t time.Time) *AlertChannelUpdateOne {
	acuo.mutation.SetCreatedAt(t)
	return acuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (acuo *AlertChannelUpdateOne) SetNillableCreatedAt(t *time.Time) *AlertChannelUpdateOne {
	if t != nil {
		acuo.SetCreatedAt(*t)
	}
	return acuo
}

// SetUpdatedAt sets the "updated_at" field.
func (acuo *AlertChannelUpdateOne) SetUpdatedAt(t time.Time) *AlertChannelUpdateOne {
	acuo.mutation.SetUpdatedAt(t)
	return acuo
}

// AddMonitorIDs adds the "monitors" edge to the Monitor entity by IDs.
func (acuo *AlertChannelUpdateOne) AddMonitorIDs(ids ...string) *AlertChannelUpdateOne {
	acuo.mutation.AddMonitorIDs(ids...)
	return acuo
}

// AddMonitors adds the "monitors" edges to the Monitor entity.
func (acuo *AlertChannelUpdateOne) AddMonitors(m ...*Monitor) *AlertChannelUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return acuo.AddMonitorIDs(ids...)
}

// Mutation returns the AlertChannelMutation object of the builder.
func (acuo *AlertChannelUpdateOne) Mutation() *AlertChannelMutation {
	return acuo.mutation
}

// ClearMonitors clears all "monitors" edges to the Monitor entity.
func (acuo *AlertChannelUpdateOne) ClearMonitors() *AlertChannelUpdateOne {
	acuo.mutation.ClearMonitors()
	return acuo
}

// RemoveMonitorIDs removes the "monitors" edge to Monitor entities by IDs.
func (acuo *AlertChannelUpdateOne) RemoveMonitorIDs(ids ...string) *AlertChannelUpdateOne {
	acuo.mutation.RemoveMonitorIDs(ids...)
	return acuo
}

// RemoveMonitors removes "monitors" edges to Monitor entities.
func (acuo *AlertChannelUpdateOne) RemoveMonitors(m ...*Monitor) *AlertChannelUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return acuo.RemoveMonitorIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (acuo *AlertChannelUpdateOne) Select(field string, fields ...string) *AlertChannelUpdateOne {
	acuo.fields = append([]string{field}, fields...)
	return acuo
}

// Save executes the query and returns the updated AlertChannel entity.
func (acuo *AlertChannelUpdateOne) Save(ctx context.Context) (*AlertChannel, error) {
	var (
		err  error
		node *AlertChannel
	)
	acuo.defaults()
	if len(acuo.hooks) == 0 {
		node, err = acuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AlertChannelMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			acuo.mutation = mutation
			node, err = acuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(acuo.hooks) - 1; i >= 0; i-- {
			if acuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = acuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, acuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*AlertChannel)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AlertChannelMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (acuo *AlertChannelUpdateOne) SaveX(ctx context.Context) *AlertChannel {
	node, err := acuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (acuo *AlertChannelUpdateOne) Exec(ctx context.Context) error {
	_, err := acuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acuo *AlertChannelUpdateOne) ExecX(ctx context.Context) {
	if err := acuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (acuo *AlertChannelUpdateOne) defaults() {
	if _, ok := acuo.mutation.UpdatedAt(); !ok {
		v := alertchannel.UpdateDefaultUpdatedAt()
		acuo.mutation.SetUpdatedAt(v)
	}
}

func (acuo *AlertChannelUpdateOne) sqlSave(ctx context.Context) (_node *AlertChannel, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   alertchannel.Table,
			Columns: alertchannel.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: alertchannel.FieldID,
			},
		},
	}
	id, ok := acuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AlertChannel.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := acuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, alertchannel.FieldID)
		for _, f := range fields {
			if !alertchannel.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != alertchannel.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := acuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := acuo.mutation.Config(); ok {
		_spec.SetField(alertchannel.FieldConfig, field.TypeJSON, value)
	}
	if value, ok := acuo.mutation.CreatedAt(); ok {
		_spec.SetField(alertchannel.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := acuo.mutation.UpdatedAt(); ok {
		_spec.SetField(alertchannel.FieldUpdatedAt, field.TypeTime, value)
	}
	if acuo.mutation.MonitorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   alertchannel.MonitorsTable,
			Columns: alertchannel.MonitorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: monitor.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acuo.mutation.RemovedMonitorsIDs(); len(nodes) > 0 && !acuo.mutation.MonitorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   alertchannel.MonitorsTable,
			Columns: alertchannel.MonitorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: monitor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acuo.mutation.MonitorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   alertchannel.MonitorsTable,
			Columns: alertchannel.MonitorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: monitor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AlertChannel{config: acuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, acuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{alertchannel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
